#ifndef FN
#error Mmm, what?
#endif

FN(FMOD1_RESULT, Memory_Initialize,           (void *poolmem, int poollen, FMOD1_MEMORY_ALLOC_CALLBACK useralloc, FMOD1_MEMORY_REALLOC_CALLBACK userrealloc, FMOD1_MEMORY_FREE_CALLBACK userfree, FMOD1_MEMORY_TYPE memtypeflags) );
FN(FMOD1_RESULT, Memory_GetStats,             (int *currentalloced, int *maxalloced, FMOD1_BOOL blocking) );
FN(FMOD1_RESULT, Debug_Initialize,            (FMOD1_DEBUG_FLAGS flags, FMOD1_DEBUG_MODE mode, FMOD1_DEBUG_CALLBACK callback, const char *filename) );
FN(FMOD1_RESULT, File_SetDiskBusy,            (int busy) );
FN(FMOD1_RESULT, File_GetDiskBusy,            (int *busy) );
FN(FMOD1_RESULT, System_Create,               (FMOD1_SYSTEM **system); );
FN(FMOD1_RESULT, System_Release,              (FMOD1_SYSTEM *system); );
FN(FMOD1_RESULT, System_SetOutput,                 (FMOD1_SYSTEM *system, FMOD1_OUTPUTTYPE output) );
FN(FMOD1_RESULT, System_GetOutput,                 (FMOD1_SYSTEM *system, FMOD1_OUTPUTTYPE *output) );
FN(FMOD1_RESULT, System_GetNumDrivers,             (FMOD1_SYSTEM *system, int *numdrivers) );
FN(FMOD1_RESULT, System_GetDriverInfo,             (FMOD1_SYSTEM *system, int id, char *name, int namelen, FMOD1_GUID *guid, int *systemrate, FMOD1_SPEAKERMODE *speakermode, int *speakermodechannels) );
FN(FMOD1_RESULT, System_SetDriver,                 (FMOD1_SYSTEM *system, int driver) );
FN(FMOD1_RESULT, System_GetDriver,                 (FMOD1_SYSTEM *system, int *driver) );
FN(FMOD1_RESULT, System_SetSoftwareChannels,       (FMOD1_SYSTEM *system, int numsoftwarechannels) );
FN(FMOD1_RESULT, System_GetSoftwareChannels,       (FMOD1_SYSTEM *system, int *numsoftwarechannels) );
FN(FMOD1_RESULT, System_SetSoftwareFormat,         (FMOD1_SYSTEM *system, int samplerate, FMOD1_SPEAKERMODE speakermode, int numrawspeakers) );
FN(FMOD1_RESULT, System_GetSoftwareFormat,         (FMOD1_SYSTEM *system, int *samplerate, FMOD1_SPEAKERMODE *speakermode, int *numrawspeakers) );
FN(FMOD1_RESULT, System_SetDSPBufferSize,          (FMOD1_SYSTEM *system, unsigned int bufferlength, int numbuffers) );
FN(FMOD1_RESULT, System_GetDSPBufferSize,          (FMOD1_SYSTEM *system, unsigned int *bufferlength, int *numbuffers) );
FN(FMOD1_RESULT, System_SetFileSystem,             (FMOD1_SYSTEM *system, FMOD1_FILE_OPEN_CALLBACK useropen, FMOD1_FILE_CLOSE_CALLBACK userclose, FMOD1_FILE_READ_CALLBACK userread, FMOD1_FILE_SEEK_CALLBACK userseek, FMOD1_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD1_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign) );
FN(FMOD1_RESULT, System_AttachFileSystem,          (FMOD1_SYSTEM *system, FMOD1_FILE_OPEN_CALLBACK useropen, FMOD1_FILE_CLOSE_CALLBACK userclose, FMOD1_FILE_READ_CALLBACK userread, FMOD1_FILE_SEEK_CALLBACK userseek) );
FN(FMOD1_RESULT, System_SetAdvancedSettings,       (FMOD1_SYSTEM *system, FMOD1_ADVANCEDSETTINGS *settings) );
FN(FMOD1_RESULT, System_GetAdvancedSettings,       (FMOD1_SYSTEM *system, FMOD1_ADVANCEDSETTINGS *settings) );
FN(FMOD1_RESULT, System_SetCallback,               (FMOD1_SYSTEM *system, FMOD1_SYSTEM_CALLBACK callback, FMOD1_SYSTEM_CALLBACK_TYPE callbackmask) );
FN(FMOD1_RESULT, System_SetPluginPath,             (FMOD1_SYSTEM *system, const char *path) );
FN(FMOD1_RESULT, System_LoadPlugin,                (FMOD1_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority) );
FN(FMOD1_RESULT, System_UnloadPlugin,              (FMOD1_SYSTEM *system, unsigned int handle) );
FN(FMOD1_RESULT, System_GetNumPlugins,             (FMOD1_SYSTEM *system, FMOD1_PLUGINTYPE plugintype, int *numplugins) );
FN(FMOD1_RESULT, System_GetPluginHandle,           (FMOD1_SYSTEM *system, FMOD1_PLUGINTYPE plugintype, int index, unsigned int *handle) );
FN(FMOD1_RESULT, System_GetPluginInfo,             (FMOD1_SYSTEM *system, unsigned int handle, FMOD1_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version) );
FN(FMOD1_RESULT, System_SetOutputByPlugin,         (FMOD1_SYSTEM *system, unsigned int handle) );
FN(FMOD1_RESULT, System_GetOutputByPlugin,         (FMOD1_SYSTEM *system, unsigned int *handle) );
FN(FMOD1_RESULT, System_CreateDSPByPlugin,         (FMOD1_SYSTEM *system, unsigned int handle, FMOD1_DSP **dsp) );
FN(FMOD1_RESULT, System_GetDSPInfoByPlugin,        (FMOD1_SYSTEM *system, unsigned int handle, const FMOD1_DSP_DESCRIPTION **description) );
FN(FMOD1_RESULT, System_RegisterCodec,             (FMOD1_SYSTEM *system, FMOD1_CODEC_DESCRIPTION *description, unsigned int *handle, unsigned int priority) );
FN(FMOD1_RESULT, System_RegisterDSP,               (FMOD1_SYSTEM *system, const FMOD1_DSP_DESCRIPTION *description, unsigned int *handle) );
FN(FMOD1_RESULT, System_RegisterOutput,            (FMOD1_SYSTEM *system, const FMOD1_OUTPUT_DESCRIPTION *description, unsigned int *handle) );
FN(FMOD1_RESULT, System_Init,                      (FMOD1_SYSTEM *system, int maxchannels, FMOD1_INITFLAGS flags, void *extradriverdata) );
FN(FMOD1_RESULT, System_Close,                     (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_Update,                    (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_SetSpeakerPosition,        (FMOD1_SYSTEM *system, FMOD1_SPEAKER speaker, float x, float y, FMOD1_BOOL active) );
FN(FMOD1_RESULT, System_GetSpeakerPosition,        (FMOD1_SYSTEM *system, FMOD1_SPEAKER speaker, float *x, float *y, FMOD1_BOOL *active) );
FN(FMOD1_RESULT, System_SetStreamBufferSize,       (FMOD1_SYSTEM *system, unsigned int filebuffersize, FMOD1_TIMEUNIT filebuffersizetype) );
FN(FMOD1_RESULT, System_GetStreamBufferSize,       (FMOD1_SYSTEM *system, unsigned int *filebuffersize, FMOD1_TIMEUNIT *filebuffersizetype) );
FN(FMOD1_RESULT, System_Set3DSettings,             (FMOD1_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale) );
FN(FMOD1_RESULT, System_Get3DSettings,             (FMOD1_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale) );
FN(FMOD1_RESULT, System_Set3DNumListeners,         (FMOD1_SYSTEM *system, int numlisteners) );
FN(FMOD1_RESULT, System_Get3DNumListeners,         (FMOD1_SYSTEM *system, int *numlisteners) );
FN(FMOD1_RESULT, System_Set3DListenerAttributes,   (FMOD1_SYSTEM *system, int listener, const FMOD1_VECTOR *pos, const FMOD1_VECTOR *vel, const FMOD1_VECTOR *forward, const FMOD1_VECTOR *up) );
FN(FMOD1_RESULT, System_Get3DListenerAttributes,   (FMOD1_SYSTEM *system, int listener, FMOD1_VECTOR *pos, FMOD1_VECTOR *vel, FMOD1_VECTOR *forward, FMOD1_VECTOR *up) );
FN(FMOD1_RESULT, System_Set3DRolloffCallback,      (FMOD1_SYSTEM *system, FMOD1_3D_ROLLOFF_CALLBACK callback) );
FN(FMOD1_RESULT, System_MixerSuspend,              (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_MixerResume,               (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_GetDefaultMixMatrix,       (FMOD1_SYSTEM *system, FMOD1_SPEAKERMODE sourcespeakermode, FMOD1_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop) );
FN(FMOD1_RESULT, System_GetSpeakerModeChannels,    (FMOD1_SYSTEM *system, FMOD1_SPEAKERMODE mode, int *channels) );
FN(FMOD1_RESULT, System_GetVersion,                (FMOD1_SYSTEM *system, unsigned int *version) );
FN(FMOD1_RESULT, System_GetOutputHandle,           (FMOD1_SYSTEM *system, void **handle) );
FN(FMOD1_RESULT, System_GetChannelsPlaying,        (FMOD1_SYSTEM *system, int *channels) );
FN(FMOD1_RESULT, System_GetCPUUsage,               (FMOD1_SYSTEM *system, float *dsp, float *stream, float *geometry, float *update, float *total) );
FN(FMOD1_RESULT, System_GetSoundRAM,               (FMOD1_SYSTEM *system, int *currentalloced, int *maxalloced, int *total) );
FN(FMOD1_RESULT, System_CreateSound,               (FMOD1_SYSTEM *system, const char *name_or_data, FMOD1_MODE mode, FMOD1_CREATESOUNDEXINFO *exinfo, FMOD1_SOUND **sound) );
FN(FMOD1_RESULT, System_CreateStream,              (FMOD1_SYSTEM *system, const char *name_or_data, FMOD1_MODE mode, FMOD1_CREATESOUNDEXINFO *exinfo, FMOD1_SOUND **sound) );
FN(FMOD1_RESULT, System_CreateDSP,                 (FMOD1_SYSTEM *system, const FMOD1_DSP_DESCRIPTION *description, FMOD1_DSP **dsp) );
FN(FMOD1_RESULT, System_CreateDSPByType,           (FMOD1_SYSTEM *system, FMOD1_DSP_TYPE type, FMOD1_DSP **dsp) );
FN(FMOD1_RESULT, System_CreateChannelGroup,        (FMOD1_SYSTEM *system, const char *name, FMOD1_CHANNELGROUP **channelgroup) );
FN(FMOD1_RESULT, System_CreateSoundGroup,          (FMOD1_SYSTEM *system, const char *name, FMOD1_SOUNDGROUP **soundgroup) );
FN(FMOD1_RESULT, System_CreateReverb3D,            (FMOD1_SYSTEM *system, FMOD1_REVERB3D **reverb) );
FN(FMOD1_RESULT, System_PlaySound,                 (FMOD1_SYSTEM *system, FMOD1_SOUND *sound, FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL paused, FMOD1_CHANNEL **channel) );
FN(FMOD1_RESULT, System_PlayDSP,                   (FMOD1_SYSTEM *system, FMOD1_DSP *dsp, FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL paused, FMOD1_CHANNEL **channel) );
FN(FMOD1_RESULT, System_GetChannel,                (FMOD1_SYSTEM *system, int channelid, FMOD1_CHANNEL **channel) );
FN(FMOD1_RESULT, System_GetMasterChannelGroup,     (FMOD1_SYSTEM *system, FMOD1_CHANNELGROUP **channelgroup) );
FN(FMOD1_RESULT, System_GetMasterSoundGroup,       (FMOD1_SYSTEM *system, FMOD1_SOUNDGROUP **soundgroup) );
FN(FMOD1_RESULT, System_AttachChannelGroupToPort,  (FMOD1_SYSTEM *system, FMOD1_PORT_TYPE portType, FMOD1_PORT_INDEX portIndex, FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL passThru) );
FN(FMOD1_RESULT, System_DetachChannelGroupFromPort,(FMOD1_SYSTEM *system, FMOD1_CHANNELGROUP *channelgroup) );
FN(FMOD1_RESULT, System_SetReverbProperties,       (FMOD1_SYSTEM *system, int instance, const FMOD1_REVERB_PROPERTIES *prop) );
FN(FMOD1_RESULT, System_GetReverbProperties,       (FMOD1_SYSTEM *system, int instance, FMOD1_REVERB_PROPERTIES *prop) );
FN(FMOD1_RESULT, System_LockDSP,                   (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_UnlockDSP,                 (FMOD1_SYSTEM *system) );
FN(FMOD1_RESULT, System_GetRecordNumDrivers,       (FMOD1_SYSTEM *system, int *numdrivers, int *numconnected) );
FN(FMOD1_RESULT, System_GetRecordDriverInfo,       (FMOD1_SYSTEM *system, int id, char *name, int namelen, FMOD1_GUID *guid, int *systemrate, FMOD1_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD1_DRIVER_STATE *state) );
FN(FMOD1_RESULT, System_GetRecordPosition,         (FMOD1_SYSTEM *system, int id, unsigned int *position) );
FN(FMOD1_RESULT, System_RecordStart,               (FMOD1_SYSTEM *system, int id, FMOD1_SOUND *sound, FMOD1_BOOL loop) );
FN(FMOD1_RESULT, System_RecordStop,                (FMOD1_SYSTEM *system, int id) );
FN(FMOD1_RESULT, System_IsRecording,               (FMOD1_SYSTEM *system, int id, FMOD1_BOOL *recording) );
FN(FMOD1_RESULT, System_CreateGeometry,            (FMOD1_SYSTEM *system, int maxpolygons, int maxvertices, FMOD1_GEOMETRY **geometry) );
FN(FMOD1_RESULT, System_SetGeometrySettings,       (FMOD1_SYSTEM *system, float maxworldsize) );
FN(FMOD1_RESULT, System_GetGeometrySettings,       (FMOD1_SYSTEM *system, float *maxworldsize) );
FN(FMOD1_RESULT, System_LoadGeometry,              (FMOD1_SYSTEM *system, const void *data, int datasize, FMOD1_GEOMETRY **geometry) );
FN(FMOD1_RESULT, System_GetGeometryOcclusion,      (FMOD1_SYSTEM *system, const FMOD1_VECTOR *listener, const FMOD1_VECTOR *source, float *direct, float *reverb) );
FN(FMOD1_RESULT, System_SetNetworkProxy,           (FMOD1_SYSTEM *system, const char *proxy) );
FN(FMOD1_RESULT, System_GetNetworkProxy,           (FMOD1_SYSTEM *system, char *proxy, int proxylen) );
FN(FMOD1_RESULT, System_SetNetworkTimeout,         (FMOD1_SYSTEM *system, int timeout) );
FN(FMOD1_RESULT, System_GetNetworkTimeout,         (FMOD1_SYSTEM *system, int *timeout) );
FN(FMOD1_RESULT, System_SetUserData,               (FMOD1_SYSTEM *system, void *userdata) );
FN(FMOD1_RESULT, System_GetUserData,               (FMOD1_SYSTEM *system, void **userdata) );
FN(FMOD1_RESULT, Sound_Release,                    (FMOD1_SOUND *sound) );
FN(FMOD1_RESULT, Sound_GetSystemObject,            (FMOD1_SOUND *sound, FMOD1_SYSTEM **system) );
FN(FMOD1_RESULT, Sound_Lock,                       (FMOD1_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2) );
FN(FMOD1_RESULT, Sound_Unlock,                     (FMOD1_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2) );
FN(FMOD1_RESULT, Sound_SetDefaults,                (FMOD1_SOUND *sound, float frequency, int priority) );
FN(FMOD1_RESULT, Sound_GetDefaults,                (FMOD1_SOUND *sound, float *frequency, int *priority) );
FN(FMOD1_RESULT, Sound_Set3DMinMaxDistance,        (FMOD1_SOUND *sound, float min, float max) );
FN(FMOD1_RESULT, Sound_Get3DMinMaxDistance,        (FMOD1_SOUND *sound, float *min, float *max) );
FN(FMOD1_RESULT, Sound_Set3DConeSettings,          (FMOD1_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume) );
FN(FMOD1_RESULT, Sound_Get3DConeSettings,          (FMOD1_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume) );
FN(FMOD1_RESULT, Sound_Set3DCustomRolloff,         (FMOD1_SOUND *sound, FMOD1_VECTOR *points, int numpoints) );
FN(FMOD1_RESULT, Sound_Get3DCustomRolloff,         (FMOD1_SOUND *sound, FMOD1_VECTOR **points, int *numpoints) );
FN(FMOD1_RESULT, Sound_SetSubSound,                (FMOD1_SOUND *sound, int index, FMOD1_SOUND *subsound) );
FN(FMOD1_RESULT, Sound_GetSubSound,                (FMOD1_SOUND *sound, int index, FMOD1_SOUND **subsound) );
FN(FMOD1_RESULT, Sound_GetSubSoundParent,          (FMOD1_SOUND *sound, FMOD1_SOUND **parentsound) );
FN(FMOD1_RESULT, Sound_GetName,                    (FMOD1_SOUND *sound, char *name, int namelen) );
FN(FMOD1_RESULT, Sound_GetLength,                  (FMOD1_SOUND *sound, unsigned int *length, FMOD1_TIMEUNIT lengthtype) );
FN(FMOD1_RESULT, Sound_GetFormat,                  (FMOD1_SOUND *sound, FMOD1_SOUND_TYPE *type, FMOD1_SOUND_FORMAT *format, int *channels, int *bits) );
FN(FMOD1_RESULT, Sound_GetNumSubSounds,            (FMOD1_SOUND *sound, int *numsubsounds) );
FN(FMOD1_RESULT, Sound_GetNumTags,                 (FMOD1_SOUND *sound, int *numtags, int *numtagsupdated) );
FN(FMOD1_RESULT, Sound_GetTag,                     (FMOD1_SOUND *sound, const char *name, int index, FMOD1_TAG *tag) );
FN(FMOD1_RESULT, Sound_GetOpenState,               (FMOD1_SOUND *sound, FMOD1_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD1_BOOL *starving, FMOD1_BOOL *diskbusy) );
FN(FMOD1_RESULT, Sound_ReadData,                   (FMOD1_SOUND *sound, void *buffer, unsigned int lenbytes, unsigned int *read) );
FN(FMOD1_RESULT, Sound_SeekData,                   (FMOD1_SOUND *sound, unsigned int pcm) );
FN(FMOD1_RESULT, Sound_SetSoundGroup,              (FMOD1_SOUND *sound, FMOD1_SOUNDGROUP *soundgroup) );
FN(FMOD1_RESULT, Sound_GetSoundGroup,              (FMOD1_SOUND *sound, FMOD1_SOUNDGROUP **soundgroup) );
FN(FMOD1_RESULT, Sound_GetNumSyncPoints,           (FMOD1_SOUND *sound, int *numsyncpoints) );
FN(FMOD1_RESULT, Sound_GetSyncPoint,               (FMOD1_SOUND *sound, int index, FMOD1_SYNCPOINT **point) );
FN(FMOD1_RESULT, Sound_GetSyncPointInfo,           (FMOD1_SOUND *sound, FMOD1_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD1_TIMEUNIT offsettype) );
FN(FMOD1_RESULT, Sound_AddSyncPoint,               (FMOD1_SOUND *sound, unsigned int offset, FMOD1_TIMEUNIT offsettype, const char *name, FMOD1_SYNCPOINT **point) );
FN(FMOD1_RESULT, Sound_DeleteSyncPoint,            (FMOD1_SOUND *sound, FMOD1_SYNCPOINT *point) );
FN(FMOD1_RESULT, Sound_SetMode,                    (FMOD1_SOUND *sound, FMOD1_MODE mode) );
FN(FMOD1_RESULT, Sound_GetMode,                    (FMOD1_SOUND *sound, FMOD1_MODE *mode) );
FN(FMOD1_RESULT, Sound_SetLoopCount,               (FMOD1_SOUND *sound, int loopcount) );
FN(FMOD1_RESULT, Sound_GetLoopCount,               (FMOD1_SOUND *sound, int *loopcount) );
FN(FMOD1_RESULT, Sound_SetLoopPoints,              (FMOD1_SOUND *sound, unsigned int loopstart, FMOD1_TIMEUNIT loopstarttype, unsigned int loopend, FMOD1_TIMEUNIT loopendtype) );
FN(FMOD1_RESULT, Sound_GetLoopPoints,              (FMOD1_SOUND *sound, unsigned int *loopstart, FMOD1_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD1_TIMEUNIT loopendtype) );
FN(FMOD1_RESULT, Sound_GetMusicNumChannels,        (FMOD1_SOUND *sound, int *numchannels) );
FN(FMOD1_RESULT, Sound_SetMusicChannelVolume,      (FMOD1_SOUND *sound, int channel, float volume) );
FN(FMOD1_RESULT, Sound_GetMusicChannelVolume,      (FMOD1_SOUND *sound, int channel, float *volume) );
FN(FMOD1_RESULT, Sound_SetMusicSpeed,              (FMOD1_SOUND *sound, float speed) );
FN(FMOD1_RESULT, Sound_GetMusicSpeed,              (FMOD1_SOUND *sound, float *speed) );
FN(FMOD1_RESULT, Sound_SetUserData,                (FMOD1_SOUND *sound, void *userdata) );
FN(FMOD1_RESULT, Sound_GetUserData,                (FMOD1_SOUND *sound, void **userdata) );
FN(FMOD1_RESULT, Channel_GetSystemObject,          (FMOD1_CHANNEL *channel, FMOD1_SYSTEM **system) );
FN(FMOD1_RESULT, Channel_Stop,                     (FMOD1_CHANNEL *channel) );
FN(FMOD1_RESULT, Channel_SetPaused,                (FMOD1_CHANNEL *channel, FMOD1_BOOL paused) );
FN(FMOD1_RESULT, Channel_GetPaused,                (FMOD1_CHANNEL *channel, FMOD1_BOOL *paused) );
FN(FMOD1_RESULT, Channel_SetVolume,                (FMOD1_CHANNEL *channel, float volume) );
FN(FMOD1_RESULT, Channel_GetVolume,                (FMOD1_CHANNEL *channel, float *volume) );
FN(FMOD1_RESULT, Channel_SetVolumeRamp,            (FMOD1_CHANNEL *channel, FMOD1_BOOL ramp) );
FN(FMOD1_RESULT, Channel_GetVolumeRamp,            (FMOD1_CHANNEL *channel, FMOD1_BOOL *ramp) );
FN(FMOD1_RESULT, Channel_GetAudibility,            (FMOD1_CHANNEL *channel, float *audibility) );
FN(FMOD1_RESULT, Channel_SetPitch,                 (FMOD1_CHANNEL *channel, float pitch) );
FN(FMOD1_RESULT, Channel_GetPitch,                 (FMOD1_CHANNEL *channel, float *pitch) );
FN(FMOD1_RESULT, Channel_SetMute,                  (FMOD1_CHANNEL *channel, FMOD1_BOOL mute) );
FN(FMOD1_RESULT, Channel_GetMute,                  (FMOD1_CHANNEL *channel, FMOD1_BOOL *mute) );
FN(FMOD1_RESULT, Channel_SetReverbProperties,      (FMOD1_CHANNEL *channel, int instance, float wet) );
FN(FMOD1_RESULT, Channel_GetReverbProperties,      (FMOD1_CHANNEL *channel, int instance, float *wet) );
FN(FMOD1_RESULT, Channel_SetLowPassGain,           (FMOD1_CHANNEL *channel, float gain) );
FN(FMOD1_RESULT, Channel_GetLowPassGain,           (FMOD1_CHANNEL *channel, float *gain) );
FN(FMOD1_RESULT, Channel_SetMode,                  (FMOD1_CHANNEL *channel, FMOD1_MODE mode) );
FN(FMOD1_RESULT, Channel_GetMode,                  (FMOD1_CHANNEL *channel, FMOD1_MODE *mode) );
FN(FMOD1_RESULT, Channel_SetCallback,              (FMOD1_CHANNEL *channel, FMOD1_CHANNELCONTROL_CALLBACK callback) );
FN(FMOD1_RESULT, Channel_IsPlaying,                (FMOD1_CHANNEL *channel, FMOD1_BOOL *isplaying) );
FN(FMOD1_RESULT, Channel_SetPan,                   (FMOD1_CHANNEL *channel, float pan) );
FN(FMOD1_RESULT, Channel_SetMixLevelsOutput,       (FMOD1_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) );
FN(FMOD1_RESULT, Channel_SetMixLevelsInput,        (FMOD1_CHANNEL *channel, float *levels, int numlevels) );
FN(FMOD1_RESULT, Channel_SetMixMatrix,             (FMOD1_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, Channel_GetMixMatrix,             (FMOD1_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, Channel_GetDSPClock,              (FMOD1_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock) );
FN(FMOD1_RESULT, Channel_SetDelay,                 (FMOD1_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD1_BOOL stopchannels) );
FN(FMOD1_RESULT, Channel_GetDelay,                 (FMOD1_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD1_BOOL *stopchannels) );
FN(FMOD1_RESULT, Channel_AddFadePoint,             (FMOD1_CHANNEL *channel, unsigned long long dspclock, float volume) );
FN(FMOD1_RESULT, Channel_SetFadePointRamp,         (FMOD1_CHANNEL *channel, unsigned long long dspclock, float volume) );
FN(FMOD1_RESULT, Channel_RemoveFadePoints,         (FMOD1_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end) );
FN(FMOD1_RESULT, Channel_GetFadePoints,            (FMOD1_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume) );
FN(FMOD1_RESULT, Channel_GetDSP,                   (FMOD1_CHANNEL *channel, int index, FMOD1_DSP **dsp) );
FN(FMOD1_RESULT, Channel_AddDSP,                   (FMOD1_CHANNEL *channel, int index, FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, Channel_RemoveDSP,                (FMOD1_CHANNEL *channel, FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, Channel_GetNumDSPs,               (FMOD1_CHANNEL *channel, int *numdsps) );
FN(FMOD1_RESULT, Channel_SetDSPIndex,              (FMOD1_CHANNEL *channel, FMOD1_DSP *dsp, int index) );
FN(FMOD1_RESULT, Channel_GetDSPIndex,              (FMOD1_CHANNEL *channel, FMOD1_DSP *dsp, int *index) );
FN(FMOD1_RESULT, Channel_OverridePanDSP,           (FMOD1_CHANNEL *channel, FMOD1_DSP *pan) );
FN(FMOD1_RESULT, Channel_Set3DAttributes,          (FMOD1_CHANNEL *channel, const FMOD1_VECTOR *pos, const FMOD1_VECTOR *vel, const FMOD1_VECTOR *alt_pan_pos) );
FN(FMOD1_RESULT, Channel_Get3DAttributes,          (FMOD1_CHANNEL *channel, FMOD1_VECTOR *pos, FMOD1_VECTOR *vel, FMOD1_VECTOR *alt_pan_pos) );
FN(FMOD1_RESULT, Channel_Set3DMinMaxDistance,      (FMOD1_CHANNEL *channel, float mindistance, float maxdistance) );
FN(FMOD1_RESULT, Channel_Get3DMinMaxDistance,      (FMOD1_CHANNEL *channel, float *mindistance, float *maxdistance) );
FN(FMOD1_RESULT, Channel_Set3DConeSettings,        (FMOD1_CHANNEL *channel, float insideconeangle, float outsideconeangle, float outsidevolume) );
FN(FMOD1_RESULT, Channel_Get3DConeSettings,        (FMOD1_CHANNEL *channel, float *insideconeangle, float *outsideconeangle, float *outsidevolume) );
FN(FMOD1_RESULT, Channel_Set3DConeOrientation,     (FMOD1_CHANNEL *channel, FMOD1_VECTOR *orientation) );
FN(FMOD1_RESULT, Channel_Get3DConeOrientation,     (FMOD1_CHANNEL *channel, FMOD1_VECTOR *orientation) );
FN(FMOD1_RESULT, Channel_Set3DCustomRolloff,       (FMOD1_CHANNEL *channel, FMOD1_VECTOR *points, int numpoints) );
FN(FMOD1_RESULT, Channel_Get3DCustomRolloff,       (FMOD1_CHANNEL *channel, FMOD1_VECTOR **points, int *numpoints) );
FN(FMOD1_RESULT, Channel_Set3DOcclusion,           (FMOD1_CHANNEL *channel, float directocclusion, float reverbocclusion) );
FN(FMOD1_RESULT, Channel_Get3DOcclusion,           (FMOD1_CHANNEL *channel, float *directocclusion, float *reverbocclusion) );
FN(FMOD1_RESULT, Channel_Set3DSpread,              (FMOD1_CHANNEL *channel, float angle) );
FN(FMOD1_RESULT, Channel_Get3DSpread,              (FMOD1_CHANNEL *channel, float *angle) );
FN(FMOD1_RESULT, Channel_Set3DLevel,               (FMOD1_CHANNEL *channel, float level) );
FN(FMOD1_RESULT, Channel_Get3DLevel,               (FMOD1_CHANNEL *channel, float *level) );
FN(FMOD1_RESULT, Channel_Set3DDopplerLevel,        (FMOD1_CHANNEL *channel, float level) );
FN(FMOD1_RESULT, Channel_Get3DDopplerLevel,        (FMOD1_CHANNEL *channel, float *level) );
FN(FMOD1_RESULT, Channel_Set3DDistanceFilter,      (FMOD1_CHANNEL *channel, FMOD1_BOOL custom, float customLevel, float centerFreq) );
FN(FMOD1_RESULT, Channel_Get3DDistanceFilter,      (FMOD1_CHANNEL *channel, FMOD1_BOOL *custom, float *customLevel, float *centerFreq) );
FN(FMOD1_RESULT, Channel_SetUserData,              (FMOD1_CHANNEL *channel, void *userdata) );
FN(FMOD1_RESULT, Channel_GetUserData,              (FMOD1_CHANNEL *channel, void **userdata) );
FN(FMOD1_RESULT, Channel_SetFrequency,             (FMOD1_CHANNEL *channel, float frequency) );
FN(FMOD1_RESULT, Channel_GetFrequency,             (FMOD1_CHANNEL *channel, float *frequency) );
FN(FMOD1_RESULT, Channel_SetPriority,              (FMOD1_CHANNEL *channel, int priority) );
FN(FMOD1_RESULT, Channel_GetPriority,              (FMOD1_CHANNEL *channel, int *priority) );
FN(FMOD1_RESULT, Channel_SetPosition,              (FMOD1_CHANNEL *channel, unsigned int position, FMOD1_TIMEUNIT postype) );
FN(FMOD1_RESULT, Channel_GetPosition,              (FMOD1_CHANNEL *channel, unsigned int *position, FMOD1_TIMEUNIT postype) );
FN(FMOD1_RESULT, Channel_SetChannelGroup,          (FMOD1_CHANNEL *channel, FMOD1_CHANNELGROUP *channelgroup) );
FN(FMOD1_RESULT, Channel_GetChannelGroup,          (FMOD1_CHANNEL *channel, FMOD1_CHANNELGROUP **channelgroup) );
FN(FMOD1_RESULT, Channel_SetLoopCount,             (FMOD1_CHANNEL *channel, int loopcount) );
FN(FMOD1_RESULT, Channel_GetLoopCount,             (FMOD1_CHANNEL *channel, int *loopcount) );
FN(FMOD1_RESULT, Channel_SetLoopPoints,            (FMOD1_CHANNEL *channel, unsigned int loopstart, FMOD1_TIMEUNIT loopstarttype, unsigned int loopend, FMOD1_TIMEUNIT loopendtype) );
FN(FMOD1_RESULT, Channel_GetLoopPoints,            (FMOD1_CHANNEL *channel, unsigned int *loopstart, FMOD1_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD1_TIMEUNIT loopendtype) );
FN(FMOD1_RESULT, Channel_IsVirtual,                (FMOD1_CHANNEL *channel, FMOD1_BOOL *isvirtual) );
FN(FMOD1_RESULT, Channel_GetCurrentSound,          (FMOD1_CHANNEL *channel, FMOD1_SOUND **sound) );
FN(FMOD1_RESULT, Channel_GetIndex,                 (FMOD1_CHANNEL *channel, int *index) );
FN(FMOD1_RESULT, ChannelGroup_GetSystemObject,     (FMOD1_CHANNELGROUP *channelgroup, FMOD1_SYSTEM **system) );
FN(FMOD1_RESULT, ChannelGroup_Stop,                (FMOD1_CHANNELGROUP *channelgroup) );
FN(FMOD1_RESULT, ChannelGroup_SetPaused,           (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL paused) );
FN(FMOD1_RESULT, ChannelGroup_GetPaused,           (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL *paused) );
FN(FMOD1_RESULT, ChannelGroup_SetVolume,           (FMOD1_CHANNELGROUP *channelgroup, float volume) );
FN(FMOD1_RESULT, ChannelGroup_GetVolume,           (FMOD1_CHANNELGROUP *channelgroup, float *volume) );
FN(FMOD1_RESULT, ChannelGroup_SetVolumeRamp,       (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL ramp) );
FN(FMOD1_RESULT, ChannelGroup_GetVolumeRamp,       (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL *ramp) );
FN(FMOD1_RESULT, ChannelGroup_GetAudibility,       (FMOD1_CHANNELGROUP *channelgroup, float *audibility) );
FN(FMOD1_RESULT, ChannelGroup_SetPitch,            (FMOD1_CHANNELGROUP *channelgroup, float pitch) );
FN(FMOD1_RESULT, ChannelGroup_GetPitch,            (FMOD1_CHANNELGROUP *channelgroup, float *pitch) );
FN(FMOD1_RESULT, ChannelGroup_SetMute,             (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL mute) );
FN(FMOD1_RESULT, ChannelGroup_GetMute,             (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL *mute) );
FN(FMOD1_RESULT, ChannelGroup_SetReverbProperties, (FMOD1_CHANNELGROUP *channelgroup, int instance, float wet) );
FN(FMOD1_RESULT, ChannelGroup_GetReverbProperties, (FMOD1_CHANNELGROUP *channelgroup, int instance, float *wet) );
FN(FMOD1_RESULT, ChannelGroup_SetLowPassGain,      (FMOD1_CHANNELGROUP *channelgroup, float gain) );
FN(FMOD1_RESULT, ChannelGroup_GetLowPassGain,      (FMOD1_CHANNELGROUP *channelgroup, float *gain) );
FN(FMOD1_RESULT, ChannelGroup_SetMode,             (FMOD1_CHANNELGROUP *channelgroup, FMOD1_MODE mode) );
FN(FMOD1_RESULT, ChannelGroup_GetMode,             (FMOD1_CHANNELGROUP *channelgroup, FMOD1_MODE *mode) );
FN(FMOD1_RESULT, ChannelGroup_SetCallback,         (FMOD1_CHANNELGROUP *channelgroup, FMOD1_CHANNELCONTROL_CALLBACK callback) );
FN(FMOD1_RESULT, ChannelGroup_IsPlaying,           (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL *isplaying) );
FN(FMOD1_RESULT, ChannelGroup_SetPan,              (FMOD1_CHANNELGROUP *channelgroup, float pan) );
FN(FMOD1_RESULT, ChannelGroup_SetMixLevelsOutput,  (FMOD1_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) );
FN(FMOD1_RESULT, ChannelGroup_SetMixLevelsInput,   (FMOD1_CHANNELGROUP *channelgroup, float *levels, int numlevels) );
FN(FMOD1_RESULT, ChannelGroup_SetMixMatrix,        (FMOD1_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, ChannelGroup_GetMixMatrix,        (FMOD1_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, ChannelGroup_GetDSPClock,         (FMOD1_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock) );
FN(FMOD1_RESULT, ChannelGroup_SetDelay,            (FMOD1_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD1_BOOL stopchannels) );
FN(FMOD1_RESULT, ChannelGroup_GetDelay,            (FMOD1_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD1_BOOL *stopchannels) );
FN(FMOD1_RESULT, ChannelGroup_AddFadePoint,        (FMOD1_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume) );
FN(FMOD1_RESULT, ChannelGroup_SetFadePointRamp,    (FMOD1_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume) );
FN(FMOD1_RESULT, ChannelGroup_RemoveFadePoints,    (FMOD1_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end) );
FN(FMOD1_RESULT, ChannelGroup_GetFadePoints,       (FMOD1_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume) );
FN(FMOD1_RESULT, ChannelGroup_GetDSP,              (FMOD1_CHANNELGROUP *channelgroup, int index, FMOD1_DSP **dsp) );
FN(FMOD1_RESULT, ChannelGroup_AddDSP,              (FMOD1_CHANNELGROUP *channelgroup, int index, FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, ChannelGroup_RemoveDSP,           (FMOD1_CHANNELGROUP *channelgroup, FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, ChannelGroup_GetNumDSPs,          (FMOD1_CHANNELGROUP *channelgroup, int *numdsps) );
FN(FMOD1_RESULT, ChannelGroup_SetDSPIndex,         (FMOD1_CHANNELGROUP *channelgroup, FMOD1_DSP *dsp, int index) );
FN(FMOD1_RESULT, ChannelGroup_GetDSPIndex,         (FMOD1_CHANNELGROUP *channelgroup, FMOD1_DSP *dsp, int *index) );
FN(FMOD1_RESULT, ChannelGroup_OverridePanDSP,      (FMOD1_CHANNELGROUP *channelgroup, FMOD1_DSP *pan) );
FN(FMOD1_RESULT, ChannelGroup_Set3DAttributes,     (FMOD1_CHANNELGROUP *channelgroup, const FMOD1_VECTOR *pos, const FMOD1_VECTOR *vel, const FMOD1_VECTOR *alt_pan_pos) );
FN(FMOD1_RESULT, ChannelGroup_Get3DAttributes,     (FMOD1_CHANNELGROUP *channelgroup, FMOD1_VECTOR *pos, FMOD1_VECTOR *vel, FMOD1_VECTOR *alt_pan_pos) );
FN(FMOD1_RESULT, ChannelGroup_Set3DMinMaxDistance, (FMOD1_CHANNELGROUP *channelgroup, float mindistance, float maxdistance) );
FN(FMOD1_RESULT, ChannelGroup_Get3DMinMaxDistance, (FMOD1_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance) );
FN(FMOD1_RESULT, ChannelGroup_Set3DConeSettings,   (FMOD1_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume) );
FN(FMOD1_RESULT, ChannelGroup_Get3DConeSettings,   (FMOD1_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume) );
FN(FMOD1_RESULT, ChannelGroup_Set3DConeOrientation,(FMOD1_CHANNELGROUP *channelgroup, FMOD1_VECTOR *orientation) );
FN(FMOD1_RESULT, ChannelGroup_Get3DConeOrientation,(FMOD1_CHANNELGROUP *channelgroup, FMOD1_VECTOR *orientation) );
FN(FMOD1_RESULT, ChannelGroup_Set3DCustomRolloff,  (FMOD1_CHANNELGROUP *channelgroup, FMOD1_VECTOR *points, int numpoints) );
FN(FMOD1_RESULT, ChannelGroup_Get3DCustomRolloff,  (FMOD1_CHANNELGROUP *channelgroup, FMOD1_VECTOR **points, int *numpoints) );
FN(FMOD1_RESULT, ChannelGroup_Set3DOcclusion,      (FMOD1_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion) );
FN(FMOD1_RESULT, ChannelGroup_Get3DOcclusion,      (FMOD1_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion) );
FN(FMOD1_RESULT, ChannelGroup_Set3DSpread,         (FMOD1_CHANNELGROUP *channelgroup, float angle) );
FN(FMOD1_RESULT, ChannelGroup_Get3DSpread,         (FMOD1_CHANNELGROUP *channelgroup, float *angle) );
FN(FMOD1_RESULT, ChannelGroup_Set3DLevel,          (FMOD1_CHANNELGROUP *channelgroup, float level) );
FN(FMOD1_RESULT, ChannelGroup_Get3DLevel,          (FMOD1_CHANNELGROUP *channelgroup, float *level) );
FN(FMOD1_RESULT, ChannelGroup_Set3DDopplerLevel,   (FMOD1_CHANNELGROUP *channelgroup, float level) );
FN(FMOD1_RESULT, ChannelGroup_Get3DDopplerLevel,   (FMOD1_CHANNELGROUP *channelgroup, float *level) );
FN(FMOD1_RESULT, ChannelGroup_Set3DDistanceFilter, (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL custom, float customLevel, float centerFreq) );
FN(FMOD1_RESULT, ChannelGroup_Get3DDistanceFilter, (FMOD1_CHANNELGROUP *channelgroup, FMOD1_BOOL *custom, float *customLevel, float *centerFreq) );
FN(FMOD1_RESULT, ChannelGroup_SetUserData,         (FMOD1_CHANNELGROUP *channelgroup, void *userdata) );
FN(FMOD1_RESULT, ChannelGroup_GetUserData,         (FMOD1_CHANNELGROUP *channelgroup, void **userdata) );
FN(FMOD1_RESULT, ChannelGroup_Release,             (FMOD1_CHANNELGROUP *channelgroup) );
FN(FMOD1_RESULT, ChannelGroup_AddGroup,            (FMOD1_CHANNELGROUP *channelgroup, FMOD1_CHANNELGROUP *group, FMOD1_BOOL propagatedspclock, FMOD1_DSPCONNECTION **connection) );
FN(FMOD1_RESULT, ChannelGroup_GetNumGroups,        (FMOD1_CHANNELGROUP *channelgroup, int *numgroups) );
FN(FMOD1_RESULT, ChannelGroup_GetGroup,            (FMOD1_CHANNELGROUP *channelgroup, int index, FMOD1_CHANNELGROUP **group) );
FN(FMOD1_RESULT, ChannelGroup_GetParentGroup,      (FMOD1_CHANNELGROUP *channelgroup, FMOD1_CHANNELGROUP **group) );
FN(FMOD1_RESULT, ChannelGroup_GetName,             (FMOD1_CHANNELGROUP *channelgroup, char *name, int namelen) );
FN(FMOD1_RESULT, ChannelGroup_GetNumChannels,      (FMOD1_CHANNELGROUP *channelgroup, int *numchannels) );
FN(FMOD1_RESULT, ChannelGroup_GetChannel,          (FMOD1_CHANNELGROUP *channelgroup, int index, FMOD1_CHANNEL **channel) );
FN(FMOD1_RESULT, SoundGroup_Release,               (FMOD1_SOUNDGROUP *soundgroup) );
FN(FMOD1_RESULT, SoundGroup_GetSystemObject,       (FMOD1_SOUNDGROUP *soundgroup, FMOD1_SYSTEM **system) );
FN(FMOD1_RESULT, SoundGroup_SetMaxAudible,         (FMOD1_SOUNDGROUP *soundgroup, int maxaudible) );
FN(FMOD1_RESULT, SoundGroup_GetMaxAudible,         (FMOD1_SOUNDGROUP *soundgroup, int *maxaudible) );
FN(FMOD1_RESULT, SoundGroup_SetMaxAudibleBehavior, (FMOD1_SOUNDGROUP *soundgroup, FMOD1_SOUNDGROUP_BEHAVIOR behavior) );
FN(FMOD1_RESULT, SoundGroup_GetMaxAudibleBehavior, (FMOD1_SOUNDGROUP *soundgroup, FMOD1_SOUNDGROUP_BEHAVIOR *behavior) );
FN(FMOD1_RESULT, SoundGroup_SetMuteFadeSpeed,      (FMOD1_SOUNDGROUP *soundgroup, float speed) );
FN(FMOD1_RESULT, SoundGroup_GetMuteFadeSpeed,      (FMOD1_SOUNDGROUP *soundgroup, float *speed) );
FN(FMOD1_RESULT, SoundGroup_SetVolume,             (FMOD1_SOUNDGROUP *soundgroup, float volume) );
FN(FMOD1_RESULT, SoundGroup_GetVolume,             (FMOD1_SOUNDGROUP *soundgroup, float *volume) );
FN(FMOD1_RESULT, SoundGroup_Stop,                  (FMOD1_SOUNDGROUP *soundgroup) );
FN(FMOD1_RESULT, SoundGroup_GetName,               (FMOD1_SOUNDGROUP *soundgroup, char *name, int namelen) );
FN(FMOD1_RESULT, SoundGroup_GetNumSounds,          (FMOD1_SOUNDGROUP *soundgroup, int *numsounds) );
FN(FMOD1_RESULT, SoundGroup_GetSound,              (FMOD1_SOUNDGROUP *soundgroup, int index, FMOD1_SOUND **sound) );
FN(FMOD1_RESULT, SoundGroup_GetNumPlaying,         (FMOD1_SOUNDGROUP *soundgroup, int *numplaying) );
FN(FMOD1_RESULT, SoundGroup_SetUserData,           (FMOD1_SOUNDGROUP *soundgroup, void *userdata) );
FN(FMOD1_RESULT, SoundGroup_GetUserData,           (FMOD1_SOUNDGROUP *soundgroup, void **userdata) );
FN(FMOD1_RESULT, DSP_Release,                      (FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, DSP_GetSystemObject,              (FMOD1_DSP *dsp, FMOD1_SYSTEM **system) );
FN(FMOD1_RESULT, DSP_AddInput,                     (FMOD1_DSP *dsp, FMOD1_DSP *input, FMOD1_DSPCONNECTION **connection, FMOD1_DSPCONNECTION_TYPE type) );
FN(FMOD1_RESULT, DSP_DisconnectFrom,               (FMOD1_DSP *dsp, FMOD1_DSP *target, FMOD1_DSPCONNECTION *connection) );
FN(FMOD1_RESULT, DSP_DisconnectAll,                (FMOD1_DSP *dsp, FMOD1_BOOL inputs, FMOD1_BOOL outputs) );
FN(FMOD1_RESULT, DSP_GetNumInputs,                 (FMOD1_DSP *dsp, int *numinputs) );
FN(FMOD1_RESULT, DSP_GetNumOutputs,                (FMOD1_DSP *dsp, int *numoutputs) );
FN(FMOD1_RESULT, DSP_GetInput,                     (FMOD1_DSP *dsp, int index, FMOD1_DSP **input, FMOD1_DSPCONNECTION **inputconnection) );
FN(FMOD1_RESULT, DSP_GetOutput,                    (FMOD1_DSP *dsp, int index, FMOD1_DSP **output, FMOD1_DSPCONNECTION **outputconnection) );
FN(FMOD1_RESULT, DSP_SetActive,                    (FMOD1_DSP *dsp, FMOD1_BOOL active) );
FN(FMOD1_RESULT, DSP_GetActive,                    (FMOD1_DSP *dsp, FMOD1_BOOL *active) );
FN(FMOD1_RESULT, DSP_SetBypass,                    (FMOD1_DSP *dsp, FMOD1_BOOL bypass) );
FN(FMOD1_RESULT, DSP_GetBypass,                    (FMOD1_DSP *dsp, FMOD1_BOOL *bypass) );
FN(FMOD1_RESULT, DSP_SetWetDryMix,                 (FMOD1_DSP *dsp, float prewet, float postwet, float dry) );
FN(FMOD1_RESULT, DSP_GetWetDryMix,                 (FMOD1_DSP *dsp, float *prewet, float *postwet, float *dry) );
FN(FMOD1_RESULT, DSP_SetChannelFormat,             (FMOD1_DSP *dsp, FMOD1_CHANNELMASK channelmask, int numchannels, FMOD1_SPEAKERMODE source_speakermode) );
FN(FMOD1_RESULT, DSP_GetChannelFormat,             (FMOD1_DSP *dsp, FMOD1_CHANNELMASK *channelmask, int *numchannels, FMOD1_SPEAKERMODE *source_speakermode) );
FN(FMOD1_RESULT, DSP_GetOutputChannelFormat,       (FMOD1_DSP *dsp, FMOD1_CHANNELMASK inmask, int inchannels, FMOD1_SPEAKERMODE inspeakermode, FMOD1_CHANNELMASK *outmask, int *outchannels, FMOD1_SPEAKERMODE *outspeakermode) );
FN(FMOD1_RESULT, DSP_Reset,                        (FMOD1_DSP *dsp) );
FN(FMOD1_RESULT, DSP_SetParameterFloat,            (FMOD1_DSP *dsp, int index, float value) );
FN(FMOD1_RESULT, DSP_SetParameterInt,              (FMOD1_DSP *dsp, int index, int value) );
FN(FMOD1_RESULT, DSP_SetParameterBool,             (FMOD1_DSP *dsp, int index, FMOD1_BOOL value) );
FN(FMOD1_RESULT, DSP_SetParameterData,             (FMOD1_DSP *dsp, int index, void *data, unsigned int length) );
FN(FMOD1_RESULT, DSP_GetParameterFloat,            (FMOD1_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen) );
FN(FMOD1_RESULT, DSP_GetParameterInt,              (FMOD1_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen) );
FN(FMOD1_RESULT, DSP_GetParameterBool,             (FMOD1_DSP *dsp, int index, FMOD1_BOOL *value, char *valuestr, int valuestrlen) );
FN(FMOD1_RESULT, DSP_GetParameterData,             (FMOD1_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen) );
FN(FMOD1_RESULT, DSP_GetNumParameters,             (FMOD1_DSP *dsp, int *numparams) );
FN(FMOD1_RESULT, DSP_GetParameterInfo,             (FMOD1_DSP *dsp, int index, FMOD1_DSP_PARAMETER_DESC **desc) );
FN(FMOD1_RESULT, DSP_GetDataParameterIndex,        (FMOD1_DSP *dsp, int datatype, int *index) );
FN(FMOD1_RESULT, DSP_ShowConfigDialog,             (FMOD1_DSP *dsp, void *hwnd, FMOD1_BOOL show) );
FN(FMOD1_RESULT, DSP_GetInfo,                      (FMOD1_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight) );
FN(FMOD1_RESULT, DSP_GetType,                      (FMOD1_DSP *dsp, FMOD1_DSP_TYPE *type) );
FN(FMOD1_RESULT, DSP_GetIdle,                      (FMOD1_DSP *dsp, FMOD1_BOOL *idle) );
FN(FMOD1_RESULT, DSP_SetUserData,                  (FMOD1_DSP *dsp, void *userdata) );
FN(FMOD1_RESULT, DSP_GetUserData,                  (FMOD1_DSP *dsp, void **userdata) );
FN(FMOD1_RESULT, DSP_SetMeteringEnabled,           (FMOD1_DSP *dsp, FMOD1_BOOL inputEnabled, FMOD1_BOOL outputEnabled) );
FN(FMOD1_RESULT, DSP_GetMeteringEnabled,           (FMOD1_DSP *dsp, FMOD1_BOOL *inputEnabled, FMOD1_BOOL *outputEnabled) );
FN(FMOD1_RESULT, DSP_GetMeteringInfo,              (FMOD1_DSP *dsp, FMOD1_DSP_METERING_INFO *inputInfo, FMOD1_DSP_METERING_INFO *outputInfo) );
FN(FMOD1_RESULT, DSPConnection_GetInput,           (FMOD1_DSPCONNECTION *dspconnection, FMOD1_DSP **input) );
FN(FMOD1_RESULT, DSPConnection_GetOutput,          (FMOD1_DSPCONNECTION *dspconnection, FMOD1_DSP **output) );
FN(FMOD1_RESULT, DSPConnection_SetMix,             (FMOD1_DSPCONNECTION *dspconnection, float volume) );
FN(FMOD1_RESULT, DSPConnection_GetMix,             (FMOD1_DSPCONNECTION *dspconnection, float *volume) );
FN(FMOD1_RESULT, DSPConnection_SetMixMatrix,       (FMOD1_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, DSPConnection_GetMixMatrix,       (FMOD1_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop) );
FN(FMOD1_RESULT, DSPConnection_GetType,            (FMOD1_DSPCONNECTION *dspconnection, FMOD1_DSPCONNECTION_TYPE *type) );
FN(FMOD1_RESULT, DSPConnection_SetUserData,        (FMOD1_DSPCONNECTION *dspconnection, void *userdata) );
FN(FMOD1_RESULT, DSPConnection_GetUserData,        (FMOD1_DSPCONNECTION *dspconnection, void **userdata) );
FN(FMOD1_RESULT, Geometry_Release,                 (FMOD1_GEOMETRY *geometry) );
FN(FMOD1_RESULT, Geometry_AddPolygon,              (FMOD1_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD1_BOOL doublesided, int numvertices, const FMOD1_VECTOR *vertices, int *polygonindex) );
FN(FMOD1_RESULT, Geometry_GetNumPolygons,          (FMOD1_GEOMETRY *geometry, int *numpolygons) );
FN(FMOD1_RESULT, Geometry_GetMaxPolygons,          (FMOD1_GEOMETRY *geometry, int *maxpolygons, int *maxvertices) );
FN(FMOD1_RESULT, Geometry_GetPolygonNumVertices,   (FMOD1_GEOMETRY *geometry, int index, int *numvertices) );
FN(FMOD1_RESULT, Geometry_SetPolygonVertex,        (FMOD1_GEOMETRY *geometry, int index, int vertexindex, const FMOD1_VECTOR *vertex) );
FN(FMOD1_RESULT, Geometry_GetPolygonVertex,        (FMOD1_GEOMETRY *geometry, int index, int vertexindex, FMOD1_VECTOR *vertex) );
FN(FMOD1_RESULT, Geometry_SetPolygonAttributes,    (FMOD1_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD1_BOOL doublesided) );
FN(FMOD1_RESULT, Geometry_GetPolygonAttributes,    (FMOD1_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD1_BOOL *doublesided) );
FN(FMOD1_RESULT, Geometry_SetActive,               (FMOD1_GEOMETRY *geometry, FMOD1_BOOL active) );
FN(FMOD1_RESULT, Geometry_GetActive,               (FMOD1_GEOMETRY *geometry, FMOD1_BOOL *active) );
FN(FMOD1_RESULT, Geometry_SetRotation,             (FMOD1_GEOMETRY *geometry, const FMOD1_VECTOR *forward, const FMOD1_VECTOR *up) );
FN(FMOD1_RESULT, Geometry_GetRotation,             (FMOD1_GEOMETRY *geometry, FMOD1_VECTOR *forward, FMOD1_VECTOR *up) );
FN(FMOD1_RESULT, Geometry_SetPosition,             (FMOD1_GEOMETRY *geometry, const FMOD1_VECTOR *position) );
FN(FMOD1_RESULT, Geometry_GetPosition,             (FMOD1_GEOMETRY *geometry, FMOD1_VECTOR *position) );
FN(FMOD1_RESULT, Geometry_SetScale,                (FMOD1_GEOMETRY *geometry, const FMOD1_VECTOR *scale) );
FN(FMOD1_RESULT, Geometry_GetScale,                (FMOD1_GEOMETRY *geometry, FMOD1_VECTOR *scale) );
FN(FMOD1_RESULT, Geometry_Save,                    (FMOD1_GEOMETRY *geometry, void *data, int *datasize) );
FN(FMOD1_RESULT, Geometry_SetUserData,             (FMOD1_GEOMETRY *geometry, void *userdata) );
FN(FMOD1_RESULT, Geometry_GetUserData,             (FMOD1_GEOMETRY *geometry, void **userdata) );
FN(FMOD1_RESULT, Reverb3D_Release,                 (FMOD1_REVERB3D *reverb3d) );
FN(FMOD1_RESULT, Reverb3D_Set3DAttributes,         (FMOD1_REVERB3D *reverb3d, const FMOD1_VECTOR *position, float mindistance, float maxdistance) );
FN(FMOD1_RESULT, Reverb3D_Get3DAttributes,         (FMOD1_REVERB3D *reverb3d, FMOD1_VECTOR *position, float *mindistance, float *maxdistance) );
FN(FMOD1_RESULT, Reverb3D_SetProperties,           (FMOD1_REVERB3D *reverb3d, const FMOD1_REVERB_PROPERTIES *properties) );
FN(FMOD1_RESULT, Reverb3D_GetProperties,           (FMOD1_REVERB3D *reverb3d, FMOD1_REVERB_PROPERTIES *properties) );
FN(FMOD1_RESULT, Reverb3D_SetActive,               (FMOD1_REVERB3D *reverb3d, FMOD1_BOOL active) );
FN(FMOD1_RESULT, Reverb3D_GetActive,               (FMOD1_REVERB3D *reverb3d, FMOD1_BOOL *active) );
FN(FMOD1_RESULT, Reverb3D_SetUserData,             (FMOD1_REVERB3D *reverb3d, void *userdata) );
FN(FMOD1_RESULT, Reverb3D_GetUserData,             (FMOD1_REVERB3D *reverb3d, void **userdata) );